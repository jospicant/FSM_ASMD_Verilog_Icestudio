// This file was generated by				
// Qfsm Version 0.54					
// (C) Stefan Duffner, Rainer Strobel			

module my_moore1 (clk,reset,in,moore);
  input     clk, reset;
  input  [1:0]  in;
  output [1:0]  moore;
  
  reg[1:0]      moore=0;                              // No ha puesto valores a 0 de inicio
  reg[1:0]      state=0, nextstate=0;

  parameter E0 = 2'b00, E1 = 2'b01, E2 = 2'b10, E3 = 2'b11;

  always @ (posedge clk) begin
    if (reset)
      begin
        state <= E0;
        moore <= 2'b00;
      end                                            // He quitado un punto y coma que Qfsm ha puesto aquÃ­
    else
      begin
        state <= nextstate;
        case (nextstate)
          E0:
            moore <= 2'b00;
          E1:
            moore <= 2'b01;
          E2:
            moore <= 2'b10;
          E3:
            moore <= 2'b11;
        endcase
      end
  end

  always @ (reset or in or state) begin
    if (reset)
      nextstate = E0;
    else begin
      nextstate = state;
      case (state)
        E0:
        begin
          if (in==2'b10)
          begin
            nextstate = E1;
          end
          else if (in==2'b00)
          begin
          end
          else if (in==2'b01)
          begin
            nextstate = E3;
          end
          else if (in==2'b11)
          begin
          end
        end
        E1:
        begin
          if (in==2'b10)
          begin
            nextstate = E0;
          end
          else if (in==2'b00)
          begin
          end
          else if (in==2'b01)
          begin
            nextstate = E2;
          end
          else if (in==2'b11)
          begin
          end
        end
        E2:
        begin
          if (in==2'b01)
          begin
            nextstate = E1;
          end
          else if (in==2'b00)
          begin
          end
          else if (in==2'b10)
          begin
            nextstate = E3;
          end
          else if (in==2'b11)
          begin
          end
        end
        E3:
        begin
          if (in==2'b10)
          begin
            nextstate = E2;
          end
          else if (in==2'b01)
          begin
            nextstate = E0;
          end
          else if (in==2'b00)
          begin
          end
          else if (in==2'b11)
          begin
          end
        end
      endcase
    end
  end

endmodule
